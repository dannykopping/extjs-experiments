<?php

/**
 * BaseUser
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $firstName
 * @property string $lastName
 * @property string $email
 * @property string $password
 * @property enum $type
 * @property boolean $active
 * @property boolean $verified
 * @property integer $accountVerificationCodeId
 * @property timestamp $createdAt
 * @property timestamp $updatedAt
 * @property AccountVerificationCode $AccountVerificationCode
 * @property Doctrine_Collection $shortlists
 * @property Doctrine_Collection $filters
 * @property Doctrine_Collection $userInformations
 * @property Doctrine_Collection $filterUserMatches
 * @property Doctrine_Collection $externalAccounts
 * @property Doctrine_Collection $video
 * @property Doctrine_Collection $financialTransactions
 * @property Doctrine_Collection $billingHistories
 * @property Doctrine_Collection $credits
 * @property Doctrine_Collection $purchases
 * @property Doctrine_Collection $profileViews
 * @property Doctrine_Collection $preferences
 * @property Doctrine_Collection $documents
 * @property Doctrine_Collection $shortlistUsers
 *
 */
abstract class BaseUser extends Aerial_Record
{
    public function setTableDefinition()
    {
        $this->setTableName('User');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'unsigned' => true,
             'autoincrement' => true,
             'length' => '4',
             ));
        $this->hasColumn('firstName', 'string', 512, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '512',
             ));
        $this->hasColumn('lastName', 'string', 512, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '512',
             ));
        $this->hasColumn('email', 'string', 255, array(
             'type' => 'string',
             'unique' => true,
             'notnull' => true,
             'length' => '255',
             ));
        $this->hasColumn('password', 'string', 40, array(
             'type' => 'string',
             'notnull' => true,
             'length' => '40',
             ));
        $this->hasColumn('type', 'enum', null, array(
             'type' => 'enum',
             'values' => 
             array(
              0 => 'Jobseeker',
              1 => 'Recruiter/Employer',
              2 => 'Sub-User',
             ),
             'notnull' => true,
             'default' => 'Jobseeker',
             ));
        $this->hasColumn('active', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 1,
             ));
        $this->hasColumn('verified', 'boolean', null, array(
             'type' => 'boolean',
             'default' => 0,
             ));
        $this->hasColumn('accountVerificationCodeId', 'integer', 4, array(
             'type' => 'integer',
             'length' => '4',
             ));
        $this->hasColumn('createdAt', 'timestamp', null, array(
             'type' => 'timestamp',
             ));
        $this->hasColumn('updatedAt', 'timestamp', null, array(
             'type' => 'timestamp',
             ));


        $this->index('fk_User_AccountVerificationCode1', array(
             'fields' => 
             array(
              0 => 'accountVerificationCodeId',
             ),
             ));
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
        $this->option('type', 'InnoDB');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('AccountVerificationCode', array(
             'local' => 'accountVerificationCodeId',
             'foreign' => 'id'));

        $this->hasMany('Shortlist as shortlists', array(
             'refClass' => 'ShortlistUser',
             'local' => 'userId',
             'foreign' => 'shortlistId'));

        $this->hasMany('Filter as filters', array(
             'local' => 'id',
             'foreign' => 'userId'));

        $this->hasMany('UserInformation as userInformations', array(
             'local' => 'id',
             'foreign' => 'userId'));

        $this->hasMany('FilterUserMatch as filterUserMatches', array(
             'local' => 'id',
             'foreign' => 'userId'));

        $this->hasMany('ExternalAccount as externalAccounts', array(
             'local' => 'id',
             'foreign' => 'userId'));

        $this->hasMany('Video as video', array(
             'local' => 'id',
             'foreign' => 'userId'));

        $this->hasMany('FinancialTransaction as financialTransactions', array(
             'local' => 'id',
             'foreign' => 'userId'));

        $this->hasMany('BillingHistory as billingHistories', array(
             'local' => 'id',
             'foreign' => 'userId'));

        $this->hasMany('Credit as credits', array(
             'local' => 'id',
             'foreign' => 'userId'));

        $this->hasMany('Purchase as purchases', array(
             'local' => 'id',
             'foreign' => 'purchasedUserId'));

        $this->hasMany('ProfileView as profileViews', array(
             'local' => 'id',
             'foreign' => 'userId'));

        $this->hasMany('Preference as preferences', array(
             'local' => 'id',
             'foreign' => 'userId'));

        $this->hasMany('Document as documents', array(
             'local' => 'id',
             'foreign' => 'userId'));

        $this->hasMany('ShortlistUser as shortlistUsers', array(
             'local' => 'id',
             'foreign' => 'userId'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }

    public function construct()
    {
        $this->mapValue('_explicitType', 'za.co.rsajobs.vo.User');
    }
}